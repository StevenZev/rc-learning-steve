{\rtf1\ansi\ansicpg1252
{\fonttbl
{\f1\fnil\fcharset0\fprq0 Arial;}
{\f2\fnil\fcharset0\fprq0 Courier New;}
{\f3\fnil\fcharset1\fprq0 American Typewriter;}
{\f4\fnil\fcharset2\fprq0 Wingdings;}
{\f5\fnil\fcharset1\fprq0 Courier New;}
{\f6\fnil\fcharset2\fprq0 Symbol;}
{\f7\fnil\fcharset0\fprq0 DejaVu Sans;}
}
{\colortbl;
\red100\green107\blue134;
\red0\green0\blue0;
\red197\green209\blue215;
\red0\green0\blue255;
}
{\stylesheet
{\s1\li288\fi-288\kerning24\fs56\lang1033\level1 heading 1;}
{\s2\li720\fi-288\kerning24\fs48\lang1033\level2 heading 2;}
{\s3\li1152\fi-288\kerning24\fs40\lang1033\level3 heading 3;}
{\s4\li1584\fi-288\kerning24\lang1033\level4 heading 4;}
{\s5\li1872\fi-216\kerning24\fs32\lang1033\level5 heading 5;}
{\s6\li2160\fi-288\kerning24\fs26\lang1033\level6 heading 6;}
{\s7\li2448\fi-288\kerning24\fs26\lang1033\level7 heading 7;}
{\s8\li2736\fi-288\kerning24\fs26\lang1033\level8 heading 8;}
{\s9\li3024\fi-288\kerning24\fs26\lang1033\level9 heading 9;}
}
\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs108\cf1 Introduction to Programming }{\f1\fs108\cf1 in C++\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Compilers versus Interpreters\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A }{\b\f1\fs56\cf2 compiler}{\f1\fs56\cf2  produces a stand-alone binary for a given }{\i\f1\fs56\cf2 platform}{\f1\fs56\cf2  (}{\f1\fs56\cf2 cpu+operating}{\f1\fs56\cf2  system).  The output of a compiler is an }{\i\f1\fs56\cf2 object file}{\f1\fs56\cf2 , represented with a }{\loch\f2\fs56\cf2 .o}{\f1\fs56\cf2  suffix on Unix.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A }{\b\f1\fs56\cf2 linker}{\f1\fs56\cf2  takes the }{\loch\f2\fs56\cf2 .o}{\f1\fs56\cf2  files and any external }{\i\f1\fs56\cf2 libraries}{\f1\fs56\cf2  and links them into the executable.  Normally the linker is invoked through the compiler.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An }{\b\f1\fs56\cf2 interpreter}{\f1\fs56\cf2  interprets line by line.  The binary that is run is the interpreter itself.  Programs for interpreters are often called }{\i\f1\fs56\cf2 scripts}{\f1\fs56\cf2 .  Scripts are frequently cross platform, but the interpreter itself must be appropriate to the platform.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Compiled Languages\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Compiled languages are:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Generally stricter about typing (static typing) and memory allocation.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Generally produce faster and more efficient runs.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Interpreted languages are:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Generally looser about typing (dynamic typing).\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Generally have dynamically sized data structures built in.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Often run very slowly.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Strengths and Weaknesses\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0\qc {\f1\fs40\cf1 C++ (not C)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs37 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs37{\pntxtb \'95}}{\f1\fs44\cf2 Limited mathematical built-ins\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs37 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs37{\pntxtb \'95}}{\f1\fs44\cf2 True multidimensional arrays not possible without add-on libraries (Blitz++, Boost)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs37 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs37{\pntxtb \'95}}{\f1\fs44\cf2 Pretty good string handling (compared to C)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs37 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs37{\pntxtb \'95}}{\f1\fs44\cf2 Straightforward implementation of classes (but no modules)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0\qc {\f1\fs40\cf1 Fortran\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\cf2 (2003/8) Many math function built-ins\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\cf2 Multidimensional arrays a first-class data structure, array operations supported\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\cf2 Does not support true strings yet, just character arrays\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\cf2 Classes somewhat clunky.  Modules fill much of this role.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Setting Up Your Environment\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Integrated Development Environments\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An Integrated Development Environment (IDE) combines an editor and a way to compile and run programs in the environment.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A well-known IDE for Microsoft Windows is }{\f1\fs56\cf2 VisualStudio}{\f1\fs56\cf2 . Available through Microsoft Store, not free for individuals.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Mac OSX uses }{\f1\fs56\cf2 Xcode}{\f1\fs56\cf2  as its native IDE.  }{\f1\fs56\cf2 Xcode}{\f1\fs56\cf2  includes some compilers, particularly for Swift, but it can manage several other languages.  Available at App Store, free.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A full-featured cross-platform IDE is Eclipse (}{\ul\f1\fs56\cf2 www.eclipse.org}{\f1\fs56\cf2 ).  Free.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A lighter-weight IDE for Windows and Linux is Code::Blocks (}{\ul\f1\fs56\cf2 www.codeblocks.org}{\f1\fs56\cf2 ).  Free.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We will use a very lightweight IDE called }{\f1\fs56\cf2 Geany}{\f1\fs56\cf2  since it is free, easy to install and use, and  works on all three platforms.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Linux\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 For users of the University of Virginia's cluster, first load a compiler module.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 module load }{\loch\f2\fs56\cf2 gcc}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\f1\fs48\cf2 brings a newer }{\f1\fs48\cf2 gcc}{\f1\fs48\cf2 , g++, and }{\f1\fs48\cf2 gfortran}{\f1\fs48\cf2  into the current environment\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 module load }{\loch\f2\fs56\cf2 geany}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 geany}{\loch\f2\fs56\cf2  &\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Geany}{\loch\f1\fs56\cf2  is also available for all popular Linux distributions and can be installed through the distribution's package manager.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Windows and Mac\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Geany}{\f1\fs56\cf2  can be installed on Windows and Mac through the usual software installation methods.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Geany}{\f1\fs56\cf2  does not install a compiler suite.  This must be performed independently.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Macs with }{\f1\fs56\cf2 Xcode}{\f1\fs56\cf2  include }{\f1\fs56\cf2 gcc}{\f1\fs56\cf2  and g++ but not }{\f1\fs56\cf2 gfortran}{\f1\fs56\cf2 .  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Windows does not include a default compiler suite, but }{\f1\fs56\cf2 VisualStudio}{\f1\fs56\cf2  includes Microsoft C and C++.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Geany}{\f1\fs56\cf2  can be downloaded for Mac or Windows starting from its home page\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 www.geany.org\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Installing Compilers on Macs\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Install }{\f1\fs56\cf2 Xcode}{\f1\fs56\cf2  from the App Store.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If you are going to use Fortran, download a binary for your version of OSX from\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 https://gcc.gnu.org/wiki/GFortranBinaries\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Installing Compilers on Windows\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 MinGW}{\f1\fs56\cf2  provides a free distribution of }{\f1\fs56\cf2 gcc}{\f1\fs56\cf2 /g++/}{\f1\fs56\cf2 gfortran}{\f1\fs56\cf2  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Executables produced by the standard }{\f1\fs56\cf2 MinGW}{\f1\fs56\cf2  package will be 32 bits\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Also install MSYS for a minimalist Unix system.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Download from }{\ul\f1\fs48\cf2 www.mingw.org}{\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Run installer\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Choose packages to install, then click Apply.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 After the installation, follow instructions for "After Installing" at }{\ul\f1\fs48\cf2 http://www.mingw.org/wiki/Getting_Started}{\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Be sure to modify your path environment variable\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 MinGW}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Environment Variables in Windows\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Geany}{\f1\fs80\cf1  on Windows\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Variables\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Variables in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Like most programming languages, C++ is case sensitive.  Variables }{\loch\f2\fs56\cf2 Mean}{\f1\fs56\cf2  and }{\loch\f2\fs56\cf2 mean}{\f1\fs56\cf2  are different to the compiler.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Like most compiled languages, C++ is }{\i\f1\fs56\cf2 statically}{\f1\fs56\cf2  }{\i\f1\fs56\cf2 typed}{\f1\fs56\cf2 .  All variables must be }{\i\f1\fs56\cf2 declared}{\f1\fs56\cf2  to be of a specific type before they can be used.  A variable\'92s type cannot be changed once it is declared.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ is (nearly) strongly typed.  Mixed-mode expressions are limited and most conversions must be explicit.    \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Numeric Types: Integer\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Integer (}{\f1\fs56\cf2 int}{\f1\fs56\cf2 )\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Quantities with no fractional part\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Represented by sign bit + value in }{\i\f1\fs48\cf2 binary\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\i\f1\fs40\cf2 Remember that computers do not use base 10 internally\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Default integers are of size 32 bits\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Maximum signed integer is is 2}{\f1\fs48\super\cf2 32}{\f1\fs48\cf2 -1 \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\loch\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\loch\f2\fs40\cf2 unsigned }{\loch\f2\fs40\cf2 int}{\loch\f2\fs40\cf2  }{\f1\fs40\cf2 is a type that covers only nonnegative }{\f1\fs40\cf2 ints}{\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Other types\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\loch\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\loch\f2\fs40\cf2 long}{\f1\fs40\cf2  may be either 32 or 64 bits depending on compiler/platform\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1584\fi-288 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs36\cf2 Standard requires only that it be at least 32 bits.\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1584\fi-288 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs36\cf2 Usually 32 bits on Windows, 64 bits on other platforms now.\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\loch\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\loch\f2\fs40\cf2 short}{\f1\fs40\cf2  is 16 bits\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\loch\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\loch\f2\fs40\cf2 long }{\loch\f2\fs40\cf2 long}{\loch\f2\fs40\cf2  }{\f1\fs40\cf2 is a 64-bit integer (C++11 standard, before that an extension)\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Numeric Types: Single Precision\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Floating point single precision }{\loch\f2\fs56\cf2 float\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Sign, exponent, mantissa\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 32 bits \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 IEEE 754 defines representation and operations\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Approximately 7-8 decimal digits of precision, }{\i\f1\fs48\cf2 approximate}{\f1\fs48\cf2  exponent range is 10}{\f1\fs48\super\cf2 -126 }{\f1\fs48\cf2 to 10}{\f1\fs48\super\cf2 127\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Numeric Types: Double Precision\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Double precision floating point }{\loch\f2\fs56\cf2 double\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Sign, exponent, mantissa\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 64 bits \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Number of bits NOT a function of the OS type!  It is specified by the IEEE 754 standard!\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Approximately 15-17 decimal digits of precision, approximate exponential range 10}{\f1\fs48\super\cf2 -308}{\f1\fs48\cf2  to 10}{\f1\fs48\super\cf2 308\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Non-numeric Types: Boolean\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Booleans are represent truth value  }{\loch\f2\fs56\cf2 bool\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Values can be }{\loch\f2\fs56\cf2 true}{\f1\fs56\cf2  or }{\loch\f2\fs56\cf2 false\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Internally }{\loch\f2\fs56\cf2 true}{\f1\fs56\cf2  is }{\loch\f2\fs56\cf2 1}{\f1\fs56\cf2  and }{\loch\f2\fs56\cf2 false}{\f1\fs56\cf2  is }{\loch\f2\fs56\cf2 0}{\f1\fs56\cf2 , but it\'92s easier for humans to read and remember true/false.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Non-numeric Types: Character\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Character char\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 1 byte (8 bits) per single character\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A character has a fixed length that must be declared at compile time, unless it is treated as }{\f1\fs56\cf2 allocatable}{\f1\fs56\cf2  (more on that later).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 \tab }{\loch\f2\fs56\cf2 char[8] }{\loch\f2\fs56\cf2 mychar}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The default length is 1, however.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2          }{\loch\f2\fs56\cf2 char letter;\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Non-numeric Types: String\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A string is a sequence of characters of variable length.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Requires adding a header\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 #define <}{\loch\f2\fs56\cf2 string.h}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The string is a }{\i\f1\fs56\cf2 class}{\f1\fs56\cf2 , which is a little beyond our scope right now.  But you can still use basic functions without understanding the class.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 string }{\loch\f2\fs52\cf2 str}{\loch\f2\fs52\cf2 , str1, str2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 str.size}{\loch\f2\fs52\cf2 ();  // length of string\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 str1+str2; // concatenate two strings\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 str.substr}{\loch\f2\fs52\cf2 (2,5); // substring (counts from 0)\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Literals\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Literals aka constants\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Specified values\tab e.g.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 3\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 3.2\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 3.213e0   \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 "This is a string"\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 "Isn\'92t it true?"\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 true \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f1\fs48\cf2 Literals have a type but it is determined from the format rather than a declaration.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Variable Declarations\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Variables are declared by indicating the type followed by a comma-separated list of variables followed by a semicolon.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 i,j,k}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float x, y;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Initializing at Compile Time\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Variables can be declared and initialized at the same time:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float x=1.e-8, y=42.;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 i,j,k,counter}{\loch\f2\fs56\cf2 =0;\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Start }{\f1\fs56\cf2 Geany}{\f1\fs56\cf2  (or whatever editor you want to use).  Type\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs52\cf2 #include <}{\dbch\af2\loch\f2\fs52\cf2 iostream}{\dbch\af2\loch\f2\fs52\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs52\cf2 int}{\dbch\af2\loch\f2\fs52\cf2  main() \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs52\cf2 /* My first program\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs52\cf2    Author:  Your Name\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs52\cf2 */\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 float }{\dbch\af2\loch\f2\fs52\cf2 x,y}{\dbch\af2\loch\f2\fs52\cf2 ;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 int}{\dbch\af2\loch\f2\fs52\cf2  }{\dbch\af2\loch\f2\fs52\cf2 i,j}{\dbch\af2\loch\f2\fs52\cf2 =11;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 x=1.0;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 y=2.0;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 i=j+2;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 std}{\dbch\af2\loch\f2\fs52\cf2 ::}{\dbch\af2\loch\f2\fs52\cf2 cout}{\dbch\af2\loch\f2\fs52\cf2 <<"Reals are "<<x<<" "<<y<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 std}{\dbch\af2\loch\f2\fs52\cf2 ::}{\dbch\af2\loch\f2\fs52\cf2 cout}{\dbch\af2\loch\f2\fs52\cf2 <<"Integers are "<<i<<" "<<j<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs60\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs52\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 const}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In compiled languages, programmers can declare a variable to have a fixed value that cannot be changed.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In C/C++ this is indicated by the }{\loch\f2\fs56\cf2 const}{\f1\fs56\cf2  attribute.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2  }{\loch\f2\fs52\cf2 const}{\loch\f2\fs52\cf2  float pi=3.14159;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Attempting to change the value of a variable declared to be a parameter will result in a fatal compiler error.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Type Conversions\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Most compilers will automatically cast numeric variables to make mixed expressions consistent.  The variables are promoted according to their rank.  Lowest to highest the types are integer, float, double, complex}{\loch\f3\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Use explicit casting to be clear, or in circumstances such as argument lists where the compiler will not do it.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Strings may be cast to numbers and vice versa by a }{\f1\fs56\cf2 stringstream}{\f1\fs56\cf2  (this is the "correct" C++ way).\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Examples\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Explicit casting among numeric types, default kind.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f3\fs56\cf2 \tab }{\loch\f2\fs56\cf2 R=(float) I;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab I=(}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2 ) R;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab D=(double)R;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Character \uc1\u-3853? Numeric}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Stringstreams}{\f1\fs56\cf2  are internal string }{\i\f1\fs56\cf2 buffers}{\f1\fs56\cf2 . \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Convert numeric to character:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 #include <}{\loch\f2\fs46\cf2 iostream}{\loch\f2\fs46\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 #include <string>\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 #include <}{\loch\f2\fs46\cf2 sstream}{\loch\f2\fs46\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 using namespace }{\loch\f2\fs46\cf2 std}{\loch\f2\fs46\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 int}{\loch\f2\fs46\cf2  main() \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 string age;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 int}{\loch\f2\fs46\cf2  }{\loch\f2\fs46\cf2 iage}{\loch\f2\fs46\cf2 ;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 iage}{\loch\f2\fs46\cf2 =39\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 stringstream}{\loch\f2\fs46\cf2  }{\loch\f2\fs46\cf2 ss}{\loch\f2\fs46\cf2 ;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 ss}{\loch\f2\fs46\cf2 <<}{\loch\f2\fs46\cf2 iage}{\loch\f2\fs46\cf2 ;       //load }{\loch\f2\fs46\cf2 iage}{\loch\f2\fs46\cf2  into buffer\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 age=}{\loch\f2\fs46\cf2 ss.str}{\loch\f2\fs46\cf2 ();\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Convert character to numeric\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 age='51'\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 stringstream}{\loch\f2\fs46\cf2  ss2(age);\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 ss2>>}{\loch\f2\fs46\cf2 iage}{\loch\f2\fs46\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs46\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Arithmetic Operations\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Operators are defined on integers, floats, and doubles\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 + -}{\f1\fs56\cf2   add subtract\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 * /}{\f1\fs56\cf2  multiply divide\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Operator Precedence is:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2  }{\loch\f2\fs56\cf2 (* /) (+ -)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Evaluation is left to right by precedence unless told otherwise with parentheses\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Integer Operators\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In C++ 2/3 is always zero!  Why?\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Because 2 and 3 are both integers.  Nothing will be promoted to a float, so / is an integer operation that yields an integer result\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Remainder can be obtained from }{\loch\f2\fs56\cf2 %\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Use for negatives is uncommon in all languages.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Boolean Operators\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Negation\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 !\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1440\fi0 {\loch\f2\fs40\cf2 !flag\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 AND\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 &&\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 OR\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 ||\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Conditional Operators\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Numeric\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 equals}{\loch\f2\fs56\cf2   ==\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 not equal }{\loch\f2\fs56\cf2 /=\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 strictly less than  }{\loch\f2\fs56\cf2 <  \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 strictly greater than }{\loch\f2\fs56\cf2 >   \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 less than or equal to }{\loch\f2\fs56\cf2 <=  \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f1\fs56\cf2 greater than or equal to  }{\loch\f2\fs56\cf2 >=\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Conditional Operator Precedence\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 >,>=,<,<=}{\f1\fs56\cf2  outrank }{\loch\f2\fs56\cf2 ==}{\f1\fs56\cf2  or }{\loch\f2\fs56\cf2 !=\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 ==}{\f1\fs56\cf2 ,}{\loch\f2\fs56\cf2 !=}{\f1\fs56\cf2  outranks }{\loch\f2\fs56\cf2 &&\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 &&}{\f1\fs56\cf2  outranks }{\loch\f2\fs56\cf2 ||\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 As always, use parentheses to change grouping or to improve clarity.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Expressions and Statements\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Expressions in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ expressions are much like those of other languages.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f3\fs56\cf2           }{\loch\f2\fs56\cf2 a+3*c\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     w=8.d0*real(}{\loch\f2\fs56\cf2 i,dp}{\loch\f2\fs56\cf2 )+v**3\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     z=}{\loch\f2\fs56\cf2 phase+cmplx}{\loch\f2\fs56\cf2 (0.,1.)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab }{\loch\f2\fs56\cf2 sqrt}{\loch\f2\fs56\cf2 (abs(a-b))\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab A .or. B\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs56\cf2    y > 0.0 .and. y < 1.0\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs56\cf2    z=}{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 x,y}{\loch\f2\fs56\cf2 )\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Statements\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Indentation is not required but }{\i\f1\fs56\cf2 should be }{\f1\fs56\cf2 used!\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Statements are terminated with a semicolon.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\b\f1\fs56\cf2 Code Blocks\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Code blocks are multiple statements that are logically a single statement.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 C++ uses curly braces \'7b\'7d to enclose blocks.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Two styles.  Pick on and be consistent:\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 if (}{\loch\f2\fs40\cf2 cond}{\loch\f2\fs40\cf2 ) \'7b\tab \tab \tab if (}{\loch\f2\fs40\cf2 cond}{\loch\f2\fs40\cf2 ) \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2    statements;\tab \tab \tab \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 \'7d\tab \tab \tab \tab           statements\par 
}\pard\plain\ltrpar\s8\li2736\fi-288\kerning24\fs26\lang1033\li2160\fi0 {\loch\f2\fs40\cf2 \tab \tab \tab       \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Hello World\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 #include <}{\loch\f2\cf2 iostream}{\loch\f2\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 using namespace }{\loch\f2\cf2 std}{\loch\f2\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 int}{\loch\f2\cf2  main (}{\loch\f2\cf2 int}{\loch\f2\cf2  }{\loch\f2\cf2 argc}{\loch\f2\cf2 , char ** }{\loch\f2\cf2 argv}{\loch\f2\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<"Hello world\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Write a program that will declare and set variables as indicated and will print the expressions indicated. You may use your "hello world" program as a base.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 x=17.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 =11.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 num_1=10\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 num_2=14\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<x<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 /x<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<(}{\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2 )}{\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 /x<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2 (}{\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 )/}{\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2 (x)<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 /x + x<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 Xs}{\loch\f2\fs48\cf2 /(}{\loch\f2\fs48\cf2 x+x}{\loch\f2\fs48\cf2 )<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<x/num_1<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<num_1/num_2<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<num_2/num_1<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Declare string variables large enough to hold the indicated strings. Include the header\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 #include <string>\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 string title="This is a string";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 string subtitle="Another string"\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 title.size}{\loch\f2\fs56\cf2 ()<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 string }{\loch\f2\fs56\cf2 newtitle}{\loch\f2\fs56\cf2 =title+":"+subtitle;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 newtitle}{\loch\f2\fs56\cf2 <<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 newtitle.substr}{\loch\f2\fs56\cf2 (1,3)<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 //}{\loch\f2\fs52\cf2 Quiz:Change}{\loch\f2\fs52\cf2  "This" to "That" in }{\loch\f2\fs52\cf2 newtitle}{\loch\f2\fs52\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 Exercises with conditionals.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 Be sure to declare variables appropriately.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 a=11.; b=9.; c=45; n=3;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 << }{\loch\f2\fs56\cf2 boolalpha}{\loch\f2\fs56\cf2  << (a>b)<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  << (a<b && c==n) << "\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  << (a<b || c==n) << "\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  << (a>b || c==n && a<b) <<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  <<(a>b || c==n) && a<b << "\'5cn"'\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 bool }{\loch\f2\fs56\cf2 is_equal}{\loch\f2\fs56\cf2 = a==b;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 is_equal}{\loch\f2\fs56\cf2 <<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 C++ Loops and Conditionals\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Conditionals\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 else if/else if }{\f1\fs56\cf2  and }{\loch\f2\fs56\cf2 else}{\f1\fs56\cf2  are optional\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2     }{\loch\f2\fs56\cf2 if ( comparison ) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \tab code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 else if ( comparison) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2   more code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 else  \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \tab yet more code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 SWITCH\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs61 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs61{\pntxtb \'95}}{\f1\fs72\cf2 Many else ifs can become confusing.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs62\cf2 switch (expression)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab case }{\dbch\af2\loch\f2\fs62\cf2 const}{\dbch\af2\loch\f2\fs62\cf2  value0: \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab code;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab break;  //optional\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab case }{\dbch\af2\loch\f2\fs62\cf2 const}{\dbch\af2\loch\f2\fs62\cf2  value1:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab break;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab case }{\dbch\af2\loch\f2\fs62\cf2 const}{\dbch\af2\loch\f2\fs62\cf2  value2:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab break;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2    case }{\dbch\af2\loch\f2\fs62\cf2 const}{\dbch\af2\loch\f2\fs62\cf2  value3}{\dbch\af2\loch\f2\fs62\cf2 :\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab break;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab  default :   // Optional, usually needs break before\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \tab \tab code;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\dbch\af2\loch\f2\fs62\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f1\fs76\cf2 where \'93}{\loch\f1\fs76\cf2 const}{\loch\f1\fs76\cf2  value\'94 is either something declared }{\dbch\af2\loch\f2\fs76\cf2 const}{\loch\f1\fs76\cf2  or a literal.  It must be an integer, or convertible to an integer (so char is acceptable but not string).\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f3\fs62\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 SWITCH Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\cf2 switch (chooser) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs48\cf2 case  (0):\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs48\cf2 y}{\dbch\af2\loch\f2\fs48\cf2\lang1102 =-}{\dbch\af2\loch\f2\fs48\cf2 x2;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs48\cf2 break;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs48\cf2 case (1):\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs48\cf2 y=x2+3./x1;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs48\cf2 Break;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs48\cf2 case default\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs48\cf2 y=0.;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\cf2 \'7d\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs40\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 FOR Loop\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 for executes a fixed number of iterations unless explicitly terminated.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=}{\loch\f2\fs56\cf2 l;i}{\loch\f2\fs56\cf2 <=}{\loch\f2\fs56\cf2 u;i}{\loch\f2\fs56\cf2 +=s) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 code;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 i}{\loch\f1\fs48\cf2 : Loop variable\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 l}{\loch\f1\fs48\cf2 : Lower bound\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 u}{\loch\f1\fs48\cf2 : Upper bound\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 s}{\loch\f1\fs48\cf2 : Stride.  Use }{\loch\f2\fs48\cf2 ++i}{\loch\f1\fs48\cf2  for a stride of 1.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2  }{\loch\f2\cf2 s}{\loch\f1\cf2  can be negative, in which case }{\loch\f2\cf2 l}{\loch\f1\cf2  must be greater than }{\loch\f2\cf2 u}{\loch\f1\cf2 . For -1 use }{\loch\f2\cf2 --i}{\loch\f1\cf2  or similar.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Early Exit\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs60\cf2 break}{\f1\fs60\cf2 : leave loop \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1440\fi-720 {\pntext\pard\plain\loch\f1\fs51 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs51{\pntxtb \'95}}{\loch\f2\fs60\cf2 break}{\f1\fs60\cf2  is able to break out of }{\i\f1\fs60\cf2 only}{\f1\fs60\cf2  the loop level }{\i\f1\fs60\cf2 in which it appears}{\f1\fs60\cf2 .  It cannot break from an inner loop all the way out of a nested set of loops.  This is a case where }{\loch\f2\fs60\cf2 goto}{\f1\fs60\cf2  may be better than the alternatives. \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1440\fi-720 {\pntext\pard\plain\loch\f1\fs51 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs51{\pntxtb \'95}}{\loch\f2\fs60\cf2 continue}{\f1\fs60\cf2 : skip rest of loop and go to next iteration.  \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1440\fi-720 {\pntext\pard\plain\loch\f1\fs51 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs51{\pntxtb \'95}}{\loch\f2\fs60\cf2 goto}{\loch\f2\fs60\cf2  }{\loch\f1\fs60\cf2 Syntax (use sparingly):\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152\fi0 {\loch\f2\fs52\cf2 goto}{\loch\f2\fs52\cf2  Label;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152\fi0 {\loch\f2\fs52\cf2 \'85\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152\fi0 {\loch\f2\fs52\cf2 Label:\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1584\fi0 {\loch\f2\fs48\cf2 Code\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 WHILE Loops\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 while (<logical expression>) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \tab statement\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2 \tab statement\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs56\cf2      \'85\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1440\fi-720 {\pntext\pard\plain\loch\f1\fs54 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs54{\pntxtb \'95}}{\loch\f1\fs64\cf2 Remember that your logical expression must become false at some point.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  x, y, z;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 x=-20;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 y=-10;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 while (x<0 && y<0) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    x=10-y;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    y+=1;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    z=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 z=1;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Break/Continue\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li170\fi0 {\loch\f2\fs56\cf2 float x=1.;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2 do while (x>0.0) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2 \tab  x=x+1.;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2    if (x>=10000.0) break;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2    if (x<100.0) continue;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2 \tab \tab x+=20.0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li680\fi-510 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Repeat-Until\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 do \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2    statement;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2    statement;}{\loch\f2\fs52\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2    \'85.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2    if (<logical expression>) break;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs52\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 The}{\loch\f2\fs56\cf2  while }{\loch\f1\fs56\cf2 always tests at the }{\i\loch\f1\fs56\cf2 top}{\loch\f1\fs56\cf2  of the loop.  The }{\loch\f2\fs56\cf2 do}{\loch\f1\fs56\cf2  \'85 }{\loch\f2\fs56\cf2 if/break}{\loch\f1\fs56\cf2  form can test anywhere.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs44\cf2 #include <}{\dbch\af2\loch\f2\fs44\cf2 iostream}{\dbch\af2\loch\f2\fs44\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs44\cf2 using namespace }{\dbch\af2\loch\f2\fs44\cf2 std}{\dbch\af2\loch\f2\fs44\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs44\cf2 int}{\dbch\af2\loch\f2\fs44\cf2  main() \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 int}{\dbch\af2\loch\f2\fs44\cf2  x, y, z;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 x=-20;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 y=-10;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 while (x<0 && y<0) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2    x=10-y;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2    y=y+1;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2    z=0;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 z=1;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 cout}{\dbch\af2\loch\f2\fs44\cf2 <<x<<" "<<y<<" "<<z<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs44\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs44\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Loop from 0 to 20 by increments of 2.  Make sure that 20 is included.  Print the loop variable at each iteration.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Start a variable n at 1.  As long as n is less than 121, do the following:\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 If n is even, add 3\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 If n is odd, add 5\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Print n for each iteration.  Why do you get the last value?\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Set a float value x=0. Loop from 1 to N inclusive by 1.  \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 If the loop variable is less than M, add 11. to x.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 If x > w and x < z, skip the iteration.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 If x > 100., exit the loop.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Experiment with different values for the variables.  Start with N=50, M=25, w=9., z=13.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Arrays\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Terminology\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A }{\i\f1\fs56\cf2 scalar}{\f1\fs56\cf2  is a single item (real/float, integer, character/string, complex, etc.)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An }{\i\f1\fs56\cf2 array}{\f1\fs56\cf2  contains data of the }{\b\f1\fs56\cf2 same type}{\f1\fs56\cf2  with each scalar element addressed by }{\i\f1\fs56\cf2 indexing}{\f1\fs56\cf2  into the array. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An array has one or more }{\i\f1\fs56\cf2 dimensions}{\f1\fs56\cf2 .  The }{\i\f1\fs56\cf2 bounds}{\f1\fs56\cf2  are the lowest and highest indexes.  The }{\i\f1\fs56\cf2 rank}{\f1\fs56\cf2  is the number of dimensions.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ does not have arrays as first-class data types.  A C-style array is a block of memory.  Other options are available in class libraries.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 C-Style Arrays\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Arrays must be declared by type and either by size or by some indication of the number of dimensions.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f3\fs56\cf2 \tab }{\loch\f2\fs56\cf2 float a[100];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  M[10][10];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 If a variable is used, it must be a }{\loch\f2\fs56\cf2 const}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab }{\loch\f2\fs56\cf2 const}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  N=10;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \tab float z[N];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 The starting index is always 0, so for a 100-element array the items are number 0 to 99.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Orientation\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Array elements are }{\i\f1\fs56\cf2 adjacent}{\f1\fs56\cf2  in memory (this is one of their advantages) and are arranged linearly no matter how many dimensions you declare. If you declare a 3x2 array the order in memory is\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2     }{\loch\f2\cf2 (1,1), (1,2), (2,1), (2,2), (3,1), (3,2)}{\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 \'93Orientation\'94 refers to how the array is stored }{\i\f1\fs56\cf2 in}{\f1\fs56\cf2  }{\i\f1\fs56\cf2 memory}{\f1\fs56\cf2 , not to any mathematical properties.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ and most other languages are }{\i\f1\fs56\cf2 row-major }{\f1\fs56\cf2 oriented.  Some (Fortran, }{\f1\fs56\cf2 Matlab}{\f1\fs56\cf2 , R) are }{\i\f1\fs56\cf2 column-major}{\f1\fs56\cf2  oriented.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Loop indices should reflect this whenever possible (when you need loops).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Move left to right.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li630\fi0 {\loch\f2\fs48\cf2 A(}{\loch\f2\fs48\cf2 i,j,k}{\loch\f2\fs48\cf2 )}{\f1\fs48\cf2  loop order is }{\loch\f2\fs48\cf2 do for i/for j/for k\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Initializing Arrays in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Arrays can be initialized when created\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs48\cf2 float A[3]=\'7b10.,20.,30.\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Curly braces are required.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 #include <}{\dbch\af2\loch\f2\fs56\cf2 iostream}{\dbch\af2\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 using namespace }{\dbch\af2\loch\f2\fs56\cf2 std}{\dbch\af2\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  main(}{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 argc}{\dbch\af2\loch\f2\fs56\cf2 , char **}{\dbch\af2\loch\f2\fs56\cf2 argv}{\dbch\af2\loch\f2\fs56\cf2 )\'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 const}{\dbch\af2\loch\f2\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  n=5;    \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 float A[n]=\'7b10.,20.,30.,40.,50.\'7d;    \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 for (}{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 =0; }{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 <n; }{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 ++)\'7b\tab \tab \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 cout}{\dbch\af2\loch\f2\fs56\cf2 <<A[}{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 ]<<" ";\tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 cout}{\dbch\af2\loch\f2\fs56\cf2  << "\'5cn";    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 return 0;\'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Initializing (Continued)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Elements not explicitly initialized will be set to 0.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Try it:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In the program on the previous page, try setting\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 float A[n]=\'7b\'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f1\fs56\cf2 Then try\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 float A[n]=\'7b10.,20.,30.\'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f1\fs56\cf2 with no other changes to the program\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 WARNING WARNING WARNING\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ happily lets you \'93walk off\'94 your array.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Most commonly this occurs when you have variables and you end up attempting to access an element outside of the declared size.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 This usually results in a segmentation violation or sometimes garbage results.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Example: in your previous code change\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 cout}{\dbch\af2\loch\f2\fs56\cf2  << A[}{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 ]<<\'93 \'93;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 To\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 cout}{\dbch\af2\loch\f2\fs56\cf2  << A[i+1]<<\'93 \'93\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Multidimensional Arrays in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Multidimensional arrays are just "arrays of arrays" in C++.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 They are declared with multiple brackets:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 float A[2][5];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Elements are referenced like\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2   A[0][2]\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2   A[}{\dbch\af2\loch\f2\fs56\cf2 i}{\dbch\af2\loch\f2\fs56\cf2 ][j]\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Initialize like\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs40\cf2 A=\'7b\'7b1.,2.,3.,4.,5.\'7d,\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 \'7b6.,7.,8.,9.,10.\'7d\'7d;\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 C++ Array Properties\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The arrays we have discussed are "C style arrays)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 They are just blocks of memory with no added metadata.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 1D arrays are contiguous in memory but higher-dimensional arrays need not be.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The name of the array is also a }{\i\f1\fs56\cf2 pointer}{\f1\fs56\cf2  to the address in memory of the first (zeroth) element of the array.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Higher-dimensional arrays cannot be fully dynamically defined.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Passing Arrays to Procedures\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We can only pass the }{\i\f1\fs56\cf2 pointer}{\f1\fs56\cf2  to the first element of the array.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A pointer is a variable that holds the memory location of another variable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Array names are really pointers and in C were usually explicitly so.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We avoid explicit pointers in C++ as much as possible.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In the procedure you will declare your array with empty brackets\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 For higher-dimensional arrays only the first dimension can be empty; the others must be specified.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In main:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 float a[100];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In the function\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 float }{\dbch\af2\loch\f2\fs56\cf2 myfunc}{\dbch\af2\loch\f2\fs56\cf2 (float a[], }{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  length)}{\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Invoke the function with\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 myfunc}{\dbch\af2\loch\f2\fs56\cf2 (a, 100);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 More about this when we get to functions.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Allocation and the New Operator\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Arrays may be sized at runtime.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\cf2 int}{\loch\f2\cf2  N;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\cf2 N=30;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\cf2 float* A=new float[N];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f1\cf2 The}{\loch\f2\cf2  * }{\loch\f1\cf2 indicates that  }{\loch\f2\cf2 A }{\loch\f1\cf2 is a }{\i\loch\f1\cf2 pointer}{\loch\f1\cf2  to a block of }{\loch\f2\cf2 float }{\loch\f1\cf2 variables.  We do not have to use it subsequently, and can still refer to }{\loch\f2\cf2 A}{\loch\f1\cf2  by index, e.g. }{\loch\f2\cf2 A[2]}{\loch\f1\cf2 .\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Pointers and References\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 A pointer is a variable that points to a location in memory.  \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f1\fs48\cf2 C++ has ways to avoid pointers, but they still appear regularly in much code.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Pointers are declared with *\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float *x, y;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f1\fs48\cf2 x is a pointer, y is a variable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 The value of a pointer is obtained explicitly by the }{\i\loch\f1\fs56\cf2 dereference operator }{\loch\f2\fs56\cf2 &\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 y=99.;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 x=&y; //x now points to location of y\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<x<<" "<<*x<<" "<<y<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 0x7ffe577a0494 99 99\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Multidimensional Arrays with New\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We will only discuss 2d arrays here. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Two-dimensional arrays are 1-d arrays of pointers to an array.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 nrows}{\loch\f2\fs56\cf2 , }{\loch\f2\fs56\cf2 ncols}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 //Set }{\f1\fs48\cf2 nrows}{\f1\fs48\cf2 , }{\f1\fs48\cf2 ncols}{\f1\fs48\cf2  by some means\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs62\cf2 float **A;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs62\cf2 A=new float*[}{\loch\f2\fs62\cf2 nrows}{\loch\f2\fs62\cf2 ];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs62\cf2 for (}{\loch\f2\fs62\cf2 int}{\loch\f2\fs62\cf2  i=0;i<}{\loch\f2\fs62\cf2 nrows}{\loch\f2\fs62\cf2 ;++i) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs62\cf2 A[i]=new float[}{\loch\f2\fs62\cf2 ncols}{\loch\f2\fs62\cf2 ];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs62\cf2 \'7d\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 C++ Containers\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A }{\i\f1\fs56\cf2 container}{\f1\fs56\cf2  is a data structure that can contain other types.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ implements most containers as }{\i\f1\fs56\cf2 templates}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 This is beyond our scope right now.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If you need an array with more functionality there is an array container.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 But it's still fixed size and 1D\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The }{\loch\f2\fs56\cf2 vector}{\f1\fs56\cf2  container can be sized dynamically.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Other options include }{\loch\f2\fs56\cf2 boost}{\f1\fs56\cf2  (most popular), }{\loch\f2\fs56\cf2 blitz++ }{\loch\f1\fs56\cf2 libraries.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Write a program to:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Declare an integer array of 10 elements\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 In your program:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Print the size of the array\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Change the fourth element to 11\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Declare a real array of rank 2 (two dimensions) and allocate it with new.  Allocate the array and set each element to the sum of its row and column indices.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 C++ input/output\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Stream IO\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Stream IO allows the compiler to format the data.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Input\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Header required\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 #include <}{\f1\fs56\cf2 iostream}{\f1\fs56\cf2 >\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Read from standard input.   Requires whitespace separation.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\cf2 std}{\loch\f2\cf2 ::}{\loch\f2\cf2 cin}{\loch\f2\cf2  >> var1 >> var2 >> var3\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Write to standard output. }{\loch\f2\fs48\cf2 \'5cn}{\f1\fs48\cf2  is the end of line marker.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\cf2 std}{\loch\f2\cf2 ::}{\loch\f2\cf2 cout}{\loch\f2\cf2 <<var1<<" "<<var2<<" "<<var3<<"\'5cn"\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\cf2 std}{\loch\f2\cf2 ::}{\loch\f2\cf2 cout}{\loch\f2\cf2 <<var1<<" "<<var2<<" "<<var3<<}{\loch\f2\cf2 std}{\loch\f2\cf2 ::}{\loch\f2\cf2 endl}{\loch\f2\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Reading from the Command Line\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 We can read strings only.  You must convert if necessary to a numerical type using }{\i\loch\f1\fs56\cf2 string streams}{\loch\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 #include <}{\loch\f2\fs64\cf2 iostream}{\loch\f2\fs64\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 #include <}{\loch\f2\fs64\cf2 sstream}{\loch\f2\fs64\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 using namespace }{\loch\f2\fs64\cf2 std}{\loch\f2\fs64\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  main(}{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 argc}{\loch\f2\fs64\cf2 , char **}{\loch\f2\fs64\cf2 argv}{\loch\f2\fs64\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs64\cf2 float value;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs64\cf2 if ( }{\loch\f2\fs64\cf2 argc}{\loch\f2\fs64\cf2 >1) \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs64\cf2 stringstream}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 inputValue}{\loch\f2\fs64\cf2 ;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs64\cf2 inputValue}{\loch\f2\fs64\cf2 <<}{\loch\f2\fs64\cf2 argv}{\loch\f2\fs64\cf2 [1];\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs64\cf2 inputValue}{\loch\f2\fs64\cf2 >>value;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs64\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs64\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Formatted IO\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Formatted input is rarely needed.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Formatted output permits greater control over the appearance of output.  Compilers tend to let stream output sprawl.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Formatted output also allows programmer control over the number of decimal digits printed for floating-point numbers.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Manipulators\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ uses }{\i\f1\fs56\cf2 manipulators}{\f1\fs56\cf2  to modify the output of the stream operators }{\loch\f2\fs56\cf2 cin}{\f1\fs56\cf2  and }{\loch\f2\fs56\cf2 cout}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A few base manipulators:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Output\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 endl}{\loch\f2\fs48\cf2  }{\f1\fs48\cf2  flushes the output and inserts newline\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 ends}{\f1\fs48\cf2   outputs null character (C string terminator)\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 boolalpha}{\f1\fs48\cf2  true/false printed for Booleans\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 left/right/internal}{\f1\fs48\cf2   left/right/internal for fillers.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Input\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 ws}{\f1\fs48\cf2   reads and ignores whitespace \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 skipws}{\loch\f2\fs48\cf2 /}{\loch\f2\fs48\cf2 noskipws}{\f1\fs48\cf2  ignore/read initial whitespace as characters\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Header }{\f1\fs80\cf1 iomanip}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 iomanip}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 These manipulators stay in effect in a given output stream until cancelled.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 setw}{\loch\f2\fs56\cf2 (n)}{\loch\f1\fs56\cf2  Set width output quantity will occupy \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 setprecision}{\loch\f2\fs56\cf2 (n)}{\loch\f1\fs56\cf2  Set number of places printed for floating-point numbers\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 fixed/scientific}{\f1\fs56\cf2   Fixed-point format or scientific notation format}{\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 setfill}{\loch\f2\fs56\cf2 (c)}{\loch\f1\fs56\cf2  Set a filler character }{\loch\f2\fs56\cf2 c\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 setbase}{\loch\f2\fs56\cf2 (n) }{\loch\f1\fs56\cf2 Output in base }{\loch\f2\fs56\cf2 n}{\loch\f1\fs56\cf2  (options are 8, 10, or 16, or 0 which reverts to default of decimal).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 #include <}{\loch\f2\cf2 iostream}{\loch\f2\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 #include <}{\loch\f2\cf2 iomanip}{\loch\f2\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 using namespace }{\loch\f2\cf2 std}{\loch\f2\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 int}{\loch\f2\cf2  main() \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 float x=.00001, y=17., z=10000.;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 setprecision}{\loch\f2\fs48\cf2 (16)<<z/y<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<}{\loch\f2\fs48\cf2 setw}{\loch\f2\fs48\cf2 (20)<<}{\loch\f2\fs48\cf2 setfill}{\loch\f2\fs48\cf2 ('*')<<left<<z<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<scientific<<x<<" "<<z<<"\'5cn";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<scientific<<x<<" "<<fixed<<z<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Write a program that computes pi using a trig identity such as }{\f6\fs56\cf2 p}{\f1\fs56\cf2 =4*}{\f1\fs56\cf2 atan}{\f1\fs56\cf2 (1). Remember\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 #include <}{\f1\fs56\cf2 cmath}{\f1\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 To switch between float and double easily, use\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 typedef}{\f1\fs48\cf2  float real;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Switch "float" to "double" to change.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Declare variables as\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 real x;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Using single precision, print pi in\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 E format \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Scientific notation\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Scientific notation with 8 decimal places\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Repeat for double precision, print scientific notation to 12 places\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In an \'93infinite\'94 while loop:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Request an integer from the user without advancing to a new line, e.g.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 \'93Please enter an integer:\'94 <then read integer>\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If the integer is 1, print \'93zebra\'94.  If it is 2, print \'93kangaroo\'94.  If it is anything else except for zero, print \'93not found\'94.  If it is 0, exit the loop.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 C++ file }{\f1\fs96\cf3 io}{\f1\fs96\cf3 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 File Streams\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Standard streams are automatically opened.  Other files must be opened explicitly.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Files can be input streams (}{\f1\fs56\cf2 ifstream}{\f1\fs56\cf2 ), output streams (}{\f1\fs56\cf2 ofstream}{\f1\fs56\cf2 ), or either/both (}{\f1\fs56\cf2 fstream}{\f1\fs56\cf2 ).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 fstream}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 or\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 ofstream}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 ifstream}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 as needed.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Open\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 First a stream object must be declared.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\fs56\cf2 ifstream}{\loch\f2\fs56\cf2  input;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Then the stream can be attached to a named file\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\fs56\cf2 input.open}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 inFileName}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f1\fs48\cf2 This assumes the file exists and is opened fore reading only.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 For output use\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\fs56\cf2 ofstream}{\loch\f2\fs56\cf2  output;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\fs56\cf2 output.open}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 outFileName}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 This file will be emptied if it exists or created if it does not exist, and will be opened in write-only mode. \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Modifiers\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We can control the characteristics of the file with modifiers\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::in}{\f1\fs56\cf2   Open for input (read). Default for }{\f1\fs56\cf2 ifstream}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::out }{\f1\fs56\cf2 Open for output (write). Default for }{\f1\fs56\cf2 ofstream}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::binary }{\f1\fs56\cf2 Open as binary (not text)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::app  }{\f1\fs56\cf2 Append\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::}{\loch\f2\fs56\cf2 trunc}{\loch\f2\fs56\cf2  }{\f1\fs56\cf2 If file exists, overwrite (default for }{\f1\fs56\cf2 ofstream}{\f1\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 Use a pipe }{\loch\f2\fs56\cf2 |}{\f1\fs56\cf2  to combine them\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 ofstream.open}{\loch\f2\fs56\cf2 ("myfile.}{\loch\f2\fs56\cf2 dat}{\loch\f2\fs56\cf2 ",}{\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::binary | }{\loch\f2\fs56\cf2 ios}{\loch\f2\fs56\cf2 ::app);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Inquiring \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 All inquiry methods return a }{\loch\f2\fs56\cf2 bool}{\f1\fs56\cf2  (Boolean).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 To check whether a file is open\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2   }{\loch\f2\fs56\cf2 infile.is_open}{\loch\f2\fs56\cf2 ()  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 To check whether a file opened for reading is at the end\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 infile.eof}{\loch\f2\fs56\cf2 ()\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Generic testing\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 mystream.good}{\loch\f2\fs56\cf2 ()\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Close\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Much of the time, it is not necessary to close a file explicitly.  Files are automatically closed when execution terminates.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If many files are opened, it is good practice to close them before the end of the run.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 mystream.close}{\loch\f2\fs56\cf2 ();\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 REWIND\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An open unit can be rewound.  This places the }{\i\f1\fs56\cf2 file pointer}{\f1\fs56\cf2  back to the beginning of the file.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The default is to rewind a file automatically when it is closed.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 These are C-style functions and are in }{\loch\f2\fs56\cf2 <}{\loch\f2\fs56\cf2 cstdio}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 rewind(}{\loch\f2\fs56\cf2 mystream}{\loch\f2\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 You can also seek to position 0\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 fseek}{\loch\f2\fs56\cf2 (mystream,0,SEEK_SET)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 rewind}{\f1\fs56\cf2  clears the end-of-file and error indicators, whereas }{\loch\f2\fs56\cf2 fseek}{\f1\fs56\cf2  does not.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Reading from a File\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Frequently we use }{\loch\f2\fs56\cf2 getline}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Example\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 string line;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 //note implicit open\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 ifstream}{\loch\f2\fs48\cf2  }{\loch\f2\fs48\cf2 mystream}{\loch\f2\fs48\cf2 ("datafile.txt");\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 if ( }{\loch\f2\fs48\cf2 mystream.is_open}{\loch\f2\fs48\cf2 ()) \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs48\cf2 while (}{\loch\f2\fs48\cf2 getline}{\loch\f2\fs48\cf2 (}{\loch\f2\fs48\cf2 mystream,line}{\loch\f2\fs48\cf2 )) \'7b\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs48\cf2 //do something with line\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs48\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 else \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2  <<"Unable to open file";\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1584\fi-288 {\loch\f2\fs36\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 getline}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Getline's}{\f1\fs56\cf2  name is a little misleading.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Getline}{\f1\fs56\cf2  actually reads to a delimiter.  The default delimiter is newline }{\loch\f2\fs56\cf2 \'5cn}{\f1\fs56\cf2 .  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 getline}{\f1\fs56\cf2 (}{\f1\fs56\cf2 istream,string,char}{\f1\fs56\cf2  }{\f1\fs56\cf2 delim}{\f1\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 getline}{\f1\fs56\cf2 (}{\f1\fs56\cf2 istream,string}{\f1\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The delimiter character is discarded from the string.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Example:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<"Enter your name:";\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 getline}{\loch\f2\fs48\cf2 (}{\loch\f2\fs48\cf2 cin,name}{\loch\f2\fs48\cf2 );\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Reading a CSV file\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We often need to read files where each line contains several fields separated by a comma or other delimiter.  Example: read four values from each line for 200 lines, ignoring the second column values.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 const}{\loch\f2\fs46\cf2  }{\loch\f2\fs46\cf2 int}{\loch\f2\fs46\cf2  nobs=200;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 float bf[nobs], }{\loch\f2\fs46\cf2 wt}{\loch\f2\fs46\cf2 [nobs], }{\loch\f2\fs46\cf2 ht}{\loch\f2\fs46\cf2 [nobs];\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 string line;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 ifstream}{\loch\f2\fs46\cf2  fin("datafile.txt");\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 if (}{\loch\f2\fs46\cf2 fin.is_open}{\loch\f2\fs46\cf2 ()) \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs46\cf2 while (}{\loch\f2\fs46\cf2 getline}{\loch\f2\fs46\cf2 (}{\loch\f2\fs46\cf2 fin,line}{\loch\f2\fs46\cf2 )) \'7b\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 stringstream}{\loch\f2\fs46\cf2  }{\loch\f2\fs46\cf2 lineStream}{\loch\f2\fs46\cf2 (line);\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 string * }{\loch\f2\fs46\cf2 linevals}{\loch\f2\fs46\cf2 =new string[4]; \par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 int}{\loch\f2\fs46\cf2  index=0;\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 while ( }{\loch\f2\fs46\cf2 getline}{\loch\f2\fs46\cf2 (}{\loch\f2\fs46\cf2 lineStream,linevals}{\loch\f2\fs46\cf2 [index],',') ) \'7b\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2       ++index;\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 \'7d\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 stringstream}{\loch\f2\fs46\cf2  }{\loch\f2\fs46\cf2 ssbf}{\loch\f2\fs46\cf2 , }{\loch\f2\fs46\cf2 sswt}{\loch\f2\fs46\cf2 , }{\loch\f2\fs46\cf2 ssht}{\loch\f2\fs46\cf2 ;\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 ssbf}{\loch\f2\fs46\cf2 <<}{\loch\f2\fs46\cf2 linevals}{\loch\f2\fs46\cf2 [0];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 ssbf}{\loch\f2\fs46\cf2 >>bf[}{\loch\f2\fs46\cf2 lineCount}{\loch\f2\fs46\cf2 ];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 sswt}{\loch\f2\fs46\cf2 <<}{\loch\f2\fs46\cf2 linevals}{\loch\f2\fs46\cf2 [2];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 sswt}{\loch\f2\fs46\cf2 >>}{\loch\f2\fs46\cf2 wt}{\loch\f2\fs46\cf2 [}{\loch\f2\fs46\cf2 lineCount}{\loch\f2\fs46\cf2 ];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 ssht}{\loch\f2\fs46\cf2 <<}{\loch\f2\fs46\cf2 linevals}{\loch\f2\fs46\cf2 [3];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 ssht}{\loch\f2\fs46\cf2 >>}{\loch\f2\fs46\cf2 ht}{\loch\f2\fs46\cf2 [}{\loch\f2\fs46\cf2 lineCount}{\loch\f2\fs46\cf2 ];\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 lineCount}{\loch\f2\fs46\cf2 ++;\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs46\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 \'7d\tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 else \'7b\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs46\cf2 cout}{\loch\f2\fs46\cf2  <<"Unable to open file";\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs46\cf2 return 1;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs46\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Writing to a File\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Write to a file much like to a standard stream.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs40\cf2 ofstream}{\loch\f2\fs40\cf2  out("outfile.txt");\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs40\cf2 out<<"column1,column2,column3\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs40\cf2 for (}{\loch\f2\fs40\cf2 int}{\loch\f2\fs40\cf2  i=0;i<}{\loch\f2\fs40\cf2 nlines}{\loch\f2\fs40\cf2 ;++i) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\cf2 out<<var1[i]<<","<<var2[i]<<","<<var3[i]<<"\'5cn';\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs40\cf2 \'7d}{\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Write a program that creates a file mydata.txt containing four rows consisting of\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 1, 2, 3\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 4, 5, 6\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 7, 8, 9\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 10, 11, 12\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Rewind the file and read the data back.  Write a loop to add 1 to each value and print each row to the console.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Subprograms\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 What is a Subprogram\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A subprogram is a self-contained (but not standalone) program unit.  It performs a specific task, usually by accepting }{\i\f1\fs56\cf2 parameters}{\f1\fs56\cf2  and returning a result to the unit that invokes (calls) it.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Subprograms are essential to good code practice.  Among other benefits, they are\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Reusable.  They can be called anywhere the task is to be performed.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Easier to test and debug than a large, catch-all unit.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Effective at reducing errors such as cut and paste mistakes.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Functions and Subroutines\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Functions take any number (up to compiler limits) of arguments and return one item.  This item can be a compound type.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Functions must be declared to a type like variables.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Subroutines take any number of arguments (up to the compiler limit) and return any number of arguments.  All communication is through the argument list.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Strictly speaking, all subprograms in C++ are functions, but the ability to declare a }{\loch\f2\fs56\cf2 void}{\f1\fs56\cf2  return "type" means some are effectively subroutines. Subroutines communicate only through their parameter list.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In C/C++ either the function or its }{\i\f1\fs56\cf2 prototype}{\f1\fs56\cf2  must appear before any invocation.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Functions\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\cf2 The return value is indicated by the }{\loch\f2\cf2 return}{\loch\f1\cf2  statement.}{\loch\f2\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 <type> }{\loch\f2\cf2 myfunc}{\loch\f2\cf2 (<type> param1,<type>  \tab param2,<type> param3,<type> param4)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2    statements\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2    return }{\loch\f2\cf2 aResult}{\loch\f2\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Invoking Functions\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Function\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Invoke by its name\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1260\fi-540 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 \tab }{\loch\f2\fs48\cf2 x=}{\loch\f2\fs48\cf2 myfunc}{\loch\f2\fs48\cf2 (}{\loch\f2\fs48\cf2 z,w}{\loch\f2\fs48\cf2 )\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li1260\fi-540 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 \tab y=c*}{\loch\f2\fs48\cf2 afunc}{\loch\f2\fs48\cf2 (}{\loch\f2\fs48\cf2 z,w}{\loch\f2\fs48\cf2 )\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f1\fs48\cf2 A function is just like a variable except it cannot be an }{\i\loch\f1\fs48\cf2 lvalue}{\i\loch\f1\fs48\cf2  }{\loch\f1\fs48\cf2 (appear on the left-hand side of =)\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Passing by Value or by Reference\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Most parameters in C++ functions are passed by }{\i\f1\fs56\cf2 value}{\f1\fs56\cf2 .  The compiler makes a copy and places it into the corresponding function variable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ can pass by }{\i\f1\fs56\cf2 reference}{\f1\fs56\cf2  (more easily than C). This means that the subprogram receives a pointer to the location in memory of the variable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 When passing by reference, if that argument is changed by the subprogram it will be changed in the caller as well.  This is a }{\b\f1\fs56\cf2 side effect}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Subroutines operate }{\i\f1\fs56\cf2 entirely}{\f1\fs56\cf2  by side effects. \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Sometimes this is not called a \'93side effect\'94 when it is intentional, only when it is unintentional. \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 "Subroutines" in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f1\cf2 The & indicates we are passing by reference. This is the value that will be modified in this example.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 void }{\loch\f2\cf2 mysub}{\loch\f2\cf2 (<type> param1,<type>   \tab param2,<type> &param3)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 \tab    statements\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Invoke with its name\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 mysub}{\loch\f2\fs56\cf2 (param1, param2, param3);\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 1. Write a function that computes Euclidean distance between points }{\loch\f2\fs56\cf2 x1,y1 }{\f1\fs56\cf2 and }{\loch\f2\fs56\cf2 x2,y2}{\f1\fs56\cf2 . Include the }{\loch\f2\fs56\cf2 <}{\loch\f2\fs56\cf2 cmath}{\loch\f2\fs56\cf2 > }{\f1\fs56\cf2 header to get the }{\loch\f2\fs56\cf2 sqrt}{\f1\fs56\cf2  intrinsic that you should use.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 cmath}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2  Write the main program to call this function for     \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   x1=-1, y1=2, x2=3, y2=5\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   x1=11,y1=4, x2=7, y2=9\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 2. Given two points }{\loch\f2\fs56\cf2 x1,y1 }{\loch\f1\fs56\cf2 and }{\loch\f2\fs56\cf2 x2,y2, }{\loch\f1\fs56\cf2 write a subroutine to determine which is closer to a third point }{\loch\f2\fs56\cf2 x3,y3}{\loch\f1\fs56\cf2 .  It should print a message.  You can pass in the points and call the Euclidean distance function from the subroutine, or you can pass in the two distances.  (The former would be better programming but if you feel uncertain please go ahead and compute distances separately for now.)  Test with\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2     }{\loch\f2\fs56\cf2 x3=10, y3=5\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Passing Arrays to Subprograms\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 One-dimensional arrays may be passed as pointers or with empty square brackets [].  The size must be passed as well.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean(float A[], }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 myMean}{\loch\f2\fs56\cf2 =mean(}{\loch\f2\fs56\cf2 A,n}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 This is equivalent to\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean(float *A, }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C-style arrays are always passed by reference.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Containers such as vectors may be passed either by copying or by reference.  \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Examples\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 #include <}{\loch\f2\fs22\cf2 iostream}{\loch\f2\fs22\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 using namespace }{\loch\f2\fs22\cf2 std}{\loch\f2\fs22\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 float mean(float A[],}{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  n)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     for (}{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  i=0;i<n;++i)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2         sum+=A[i];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     return sum/(float)n;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 float mean2d(float **A, }{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  n, }{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  m)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     for (}{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2         for (}{\loch\f2\fs22\cf2 int}{\loch\f2\fs22\cf2  j=0;j<m;++j) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2             sum+=A[i][j];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2         \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2     return sum/(float)(n*m);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs22\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Examples (Continued)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  main(}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 argc}{\loch\f2\fs56\cf2 , char **}{\loch\f2\fs56\cf2 argv}{\loch\f2\fs56\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n=6, m=4;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float *A=new float[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float **B=new float*[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         B[i]=new float[m];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         A[i]=i+1;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  j=0;j<m;++j) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2             B[i][j]=i+j+2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float }{\loch\f2\fs56\cf2 mymean}{\loch\f2\fs56\cf2 =mean(}{\loch\f2\fs56\cf2 A,n}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 mymean}{\loch\f2\fs56\cf2 <<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float mymean2d=mean2d(}{\loch\f2\fs56\cf2 B,n,m}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<mymean2d<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Local Arrays\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Arrays that are local to a subprogram may be sized using an integer passed to the subprogram.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Local array memory }{\b\f1\fs56\cf2 must}{\f1\fs56\cf2  be released in the subprogram or a }{\i\f1\fs56\cf2 memory leak }{\f1\fs56\cf2 will result.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Wrong:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float }{\loch\f2\fs56\cf2 newmean}{\loch\f2\fs56\cf2 (float A[],}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float *B=new float[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         B[i]=A[i]+2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         sum+=B[i];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     return sum/(float)n;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Delete Operator\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The }{\loch\f2\fs56\cf2 delete}{\f1\fs56\cf2  operator releases memory allocated by }{\loch\f2\fs56\cf2 new}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In principle, each }{\loch\f2\fs56\cf2 new}{\f1\fs56\cf2  should have a corresponding }{\loch\f2\fs56\cf2 delete}{\f1\fs56\cf2 .  In main programs, however, the memory will be automatically released when the program ends. Best practice is to always use }{\loch\f2\fs56\cf2 delete}{\f1\fs56\cf2 , however.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The }{\loch\f2\fs56\cf2 delete}{\f1\fs56\cf2  operator is essential for }{\loch\f2\fs56\cf2 new}{\f1\fs56\cf2  in subprograms.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2 float }{\loch\f2\fs58\cf2 newmean}{\loch\f2\fs58\cf2 (float A[],}{\loch\f2\fs58\cf2 int}{\loch\f2\fs58\cf2  n)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2     float *B=new float[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2     for (}{\loch\f2\fs58\cf2 int}{\loch\f2\fs58\cf2  i=0;i<n;++i)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2         B[i]=A[i]+2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2         sum+=B[i];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2     \'7d\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs58\cf2 delete [] B;  //frees all memory associated w/ B\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2     return sum/(float)n;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs58\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Prototypes\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Traditionally, the entire function bodies were placed at the top of the file where they were used.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Modern practice in C++ is to write prototypes separate from bodies.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Prototypes enable the compiler to check that the }{\i\f1\fs56\cf2 number}{\f1\fs56\cf2  and }{\i\f1\fs56\cf2 type}{\f1\fs56\cf2  of the argument list in invocations agrees with the declared parameter list.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Prototypes are frequently collected into files ending in }{\loch\f2\fs56\cf2 .h}{\f1\fs56\cf2  (header files) with function bodies in a corresponding }{\loch\f2\fs56\cf2 .cxx (}{\f1\fs56\cf2 or }{\loch\f2\fs56\cf2 .}{\loch\f2\fs56\cf2 cpp}{\loch\f2\fs56\cf2 ) }{\f1\fs56\cf2 file.  The prototypes are the }{\i\f1\fs56\cf2 interface}{\f1\fs56\cf2  and the bodies are the }{\i\f1\fs56\cf2 implementation}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Interface+implementation}{\f1\fs56\cf2  makes it easy to reuse the code.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Note: in prototypes we need only specify number and type of the parameters.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 means.h}{\loch\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean(float *,}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean2d(float **, }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2 , }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 means.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean(float A[],}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         sum+=A[i];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     return sum/(float)n;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float mean2d(float **A, }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n, }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  m)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float sum=0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  j=0;j<m;++j) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2             sum+=A[i][j];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     return sum/(float)(n*m);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Using Prototypes\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Headers not in the system are usually specified in quotes rather than angle brackets.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 #include <}{\loch\f2\fs56\cf2 iostream}{\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 #include "}{\loch\f2\fs56\cf2 means.h}{\loch\f2\fs56\cf2 "\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 using namespace }{\loch\f2\fs56\cf2 std}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  main(}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 argc}{\loch\f2\fs56\cf2 , char **}{\loch\f2\fs56\cf2 argv}{\loch\f2\fs56\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  n=6, m=4;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float *A=new float[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float **B=new float*[n];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         B[i]=new float[m];\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<n;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         A[i]=i+1;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  j=0;j<m;++j) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2             B[i][j]=i+j+2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float }{\loch\f2\fs56\cf2 mymean}{\loch\f2\fs56\cf2 =mean(}{\loch\f2\fs56\cf2 A,n}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<}{\loch\f2\fs56\cf2 mymean}{\loch\f2\fs56\cf2 <<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     float mymean2d=mean2d(}{\loch\f2\fs56\cf2 B,n,m}{\loch\f2\fs56\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<mymean2d<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Compiling and Linking\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We now need more than one file to build the executable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Under Linux we can compile with\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 g++ -c means.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 g++ -c main.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 g++ -o means }{\loch\f2\fs56\cf2 main.o}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 means.o}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Correct your previous exercise with Euclidean distance function and subroutine to use prototypes.  You may use a single file for this exercise (prototypes at the top following }{\loch\f2\fs56\cf2 include}{\f1\fs56\cf2  and }{\loch\f2\fs56\cf2 using}{\f1\fs56\cf2  lines, bodies after main).\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 DeFAUlT}{\f1\fs96\cf3  arguments\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Default Arguments\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Subprogram may take default (optional) arguments.   Such arguments need not be passed.  If they are passed, they take on the passed value. They are declared by specifying a default value.}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (float x, float }{\loch\f2\fs56\cf2 y,float}{\loch\f2\fs56\cf2  \tab  \tab z=0.,float w=1.);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 or in a prototype\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (float, float, \tab float=0.,float=1.);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Arguments that are not optional are }{\i\loch\f1\fs56\cf2 positional}{\loch\f1\fs56\cf2  and their order matters. Positional arguments must precede all optional arguments.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Using Default Arguments\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\pntext\pard\plain\loch\f4\fs25 \uc1\u-3988?\tab}{\*\pn\pnlvlblt\pnf4\pnfs25{\pntxtb \uc1\u-3988?}}{\loch\f1\fs56\cf2 The call to the previously-defined subroutine could be\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f1\cf2 \tab }{\loch\f2\fs56\cf2 n=}{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 a,b}{\loch\f2\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f1\fs56\cf2 \tab }{\loch\f1\fs56\cf2 in which case c and d would have their default values.  The call could also be\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f2\fs56\cf2 \tab m=}{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 a,b,c}{\loch\f2\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f1\fs56\cf2 \tab or\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f2\fs56\cf2 \tab l=}{\loch\f2\fs56\cf2 myfunc}{\loch\f2\fs56\cf2 (}{\loch\f2\fs56\cf2 a,b,c,d}{\loch\f2\fs56\cf2 )\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li678\fi-510 {\loch\f1\fs56\cf2 \tab depending on how many of the default arguments needed to be passed.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li888\fi-720 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Note: C++ does not support named (keyword) arguments, unlike Python, Fortran, and some other languages.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 SCOPE\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Variable Scope\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In C++, scope is defined by the }{\i\f1\fs56\cf2 code block}{\f1\fs56\cf2 .  Code blocks are enclosed in curly braces \'7b\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A scope unit may have a variable named }{\loch\f2\fs56\cf2 x}{\f1\fs56\cf2 , and a function may also have a variable named }{\loch\f2\fs56\cf2 x}{\f1\fs56\cf2 , and if }{\loch\f2\fs56\cf2 x}{\f1\fs56\cf2  is not an argument to the function then it will be distinct from the }{\loch\f2\fs56\cf2 x}{\f1\fs56\cf2  in the calling unit.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2  float x=20.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2  float z=sub(x)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    etc.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 float sub(float y)\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    float x=10.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2    float y=30.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Code Block Examples\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Loops\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 for (}{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  i=0;i<4;++i) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2     }{\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  << i << "\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2  << i << "\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Results in: }{\loch\f2\fs56\cf2 warning: name lookup of \'91i\'92 changed for ISO \'91for\'92 scoping [-}{\loch\f2\fs56\cf2 fpermissive}{\loch\f2\fs56\cf2 ]\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Free-standing blocks\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2  }{\loch\f2\fs56\cf2 j=12;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7bj=13;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 cout}{\loch\f2\fs48\cf2 <<j<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 cout}{\loch\f2\fs56\cf2 <<j<<"\'5cn";\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 Compilers, Linkers, and Make\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Building an Executable\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The compiler first produces an }{\i\f1\fs56\cf2 object file }{\f1\fs56\cf2 for each }{\i\f1\fs56\cf2 source file}{\f1\fs56\cf2 .  In Unix these end in }{\loch\f2\fs56\cf2 .o\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Object files are binary (machine language) but cannot be executed.  They must be linked into an executable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If not told otherwise a compiler will attempt to compile and link the source file(s) it is instructed to compile.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 For Unix compilers the }{\loch\f2\fs56\cf2 -c}{\f1\fs56\cf2  option suppresses linking.  The compiler must then be run again to build the executable from the object files.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The option }{\loch\f2\fs56\cf2 -o}{\f1\fs56\cf2  is used to name the binary something other than }{\f1\fs56\cf2 a.out}{\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Linkers and Libraries\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 When the executable is created any external libraries must also be linked.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The compiler will search a standard path for libraries.  On Unix this is typically }{\loch\f2\fs56\cf2 /}{\loch\f2\fs56\cf2 usr}{\loch\f2\fs56\cf2 /lib, /}{\loch\f2\fs56\cf2 usr}{\loch\f2\fs56\cf2 /lib64, /}{\loch\f2\fs56\cf2 usr}{\loch\f2\fs56\cf2 /local/lib, /lib\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If you have others you must give the compiler the path.  }{\loch\f2\fs56\cf2 -L}{\f1\fs56\cf2  followed by a path works, then the libraries must be named }{\loch\f2\fs56\cf2 libfoo.a}{\f1\fs56\cf2  or }{\loch\f2\fs56\cf2 libfoo.so}{\loch\f2\fs56\cf2  }{\loch\f1\fs56\cf2 and it is referenced }{\loch\f2\fs56\cf2 -}{\loch\f2\fs56\cf2 lfoo}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Example:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2      }{\loch\f2\fs32\cf2 gfortran}{\loch\f2\fs32\cf2  \'96o }{\loch\f2\fs32\cf2 mycode}{\loch\f2\fs32\cf2  \'96L/}{\loch\f2\fs32\cf2 usr}{\loch\f2\fs32\cf2 /lib64/}{\loch\f2\fs32\cf2 foolib}{\loch\f2\fs32\cf2  }{\loch\f2\fs32\cf2 mymain.o}{\loch\f2\fs32\cf2  }{\loch\f2\fs32\cf2 mysub.o}{\loch\f2\fs32\cf2  -}{\loch\f2\fs32\cf2 lfoo}{\loch\f2\fs32\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Make\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 make}{\f1\fs56\cf2  is a tool to manage builds, especially with multiple files.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 It has a rigid and peculiar syntax.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 It will look for a }{\loch\f2\fs56\cf2 makefile}{\f1\fs56\cf2  first, followed by }{\loch\f2\fs56\cf2 Makefile}{\f1\fs56\cf2  (on case-sensitive systems).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The }{\loch\f2\fs56\cf2 makefile}{\f1\fs56\cf2  defines one or more }{\i\f1\fs56\cf2 targets}{\f1\fs56\cf2 .  The target is the product of one or more }{\i\f1\fs56\cf2 rules}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The target is defined with a colon following its name.  If there are }{\i\f1\fs56\cf2 dependencies}{\f1\fs56\cf2  those follow the colon. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Dependencies are other files that are required to create the current target.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Targets and Rules\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Example:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\cf2 myexec}{\loch\f2\cf2 : }{\loch\f2\cf2 main.o}{\loch\f2\cf2  }{\loch\f2\cf2 module.o}{\loch\f2\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2   <tab>}{\loch\f2\cf2 gfortran}{\loch\f2\cf2  -o }{\loch\f2\cf2 myexec}{\loch\f2\cf2  }{\loch\f2\cf2 main.o}{\loch\f2\cf2  }{\loch\f2\cf2 module.o}{\loch\f2\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The tab is }{\i\f1\fs56\cf2 required}{\f1\fs56\cf2  in the rule.  Don\'92t ask why.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Macros (automatic targets) for rules:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 $@}{\f1\fs56\cf2  the file name of the current target\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 $<}{\f1\fs56\cf2  the name of the first prerequisite\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Variables and Comments\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We can define variables in }{\f1\fs56\cf2 makefiles}{\f1\fs56\cf2  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 F90=}{\loch\f2\fs56\cf2 gfortran}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f2\fs56\cf2 CXX=g++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We then refer to them as }{\loch\f2\fs56\cf2 $(F90)}{\f1\fs56\cf2 , }{\loch\f2\fs56\cf2 $(CXX)}{\f1\fs56\cf2 , etc.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Common variables: }{\loch\f2\fs56\cf2 F90, CC, CXX, FFLAGS, F90FLAGS, CFLAGS, CXXFLAGS, CPPFLAGS }{\f1\fs56\cf2 (for the preprocessor)}{\loch\f2\fs56\cf2 , LDFLAGS\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Suffix Rules\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If all .cxx (or .cc or whatever) files are to be compiled the same way, we can write a }{\i\f1\fs56\cf2 suffix rule}{\f1\fs56\cf2  to handle them. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 It uses a }{\i\f1\fs56\cf2 phony target }{\f1\fs56\cf2 called .SUFFIXES.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 .SUFFIXES: .cxx .o\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2    $(CXX) -c $(CXXFLAGS) \'96c $< \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Pattern Rules\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An extension by Gnu make (}{\loch\f2\fs56\cf2 gmake}{\f1\fs56\cf2 ), but nearly every }{\loch\f2\fs56\cf2 make}{\f1\fs56\cf2  is }{\loch\f2\fs56\cf2 gmake}{\f1\fs56\cf2  now.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Similar to suffix rules.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Useful for Fortran 90+:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 %.mod: %.o\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Pattern for creating the .o:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 %.o: %.f90\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 $(F90) $(F90FLAGS) -c $<\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 PROG =  }{\loch\f2\fs56\cf2 bmi}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 SRCS =  bmi.cxx bmistats.cxx stats.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 OBJS =  }{\loch\f2\fs56\cf2 bmi.o}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 bmistats.o}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 stats.o}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 LIBS =\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 CC = }{\loch\f2\fs56\cf2 gcc}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 CXX = g++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 CFLAGS = -O\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 CXXFLAGS = -O -}{\loch\f2\fs56\cf2 std}{\loch\f2\fs56\cf2 =}{\loch\f2\fs56\cf2 c++}{\loch\f2\fs56\cf2 11\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 LDFLAGS =\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 all: $(PROG)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 $(PROG): $(OBJS)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         $(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 .PHONY: clean\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 clean:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         }{\loch\f2\fs56\cf2 rm}{\loch\f2\fs56\cf2  -f $(PROG) $(OBJS) *.mod\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 .SUFFIXES: $(SUFFIXES) .c .}{\loch\f2\fs56\cf2 cpp}{\loch\f2\fs56\cf2  .cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 .}{\loch\f2\fs56\cf2 c.o}{\loch\f2\fs56\cf2 :\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         $(CC) $(CFLAGS) -c $<\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 .}{\loch\f2\fs56\cf2 cpp.o}{\loch\f2\fs56\cf2  .}{\loch\f2\fs56\cf2 cxx.o}{\loch\f2\fs56\cf2 :\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2         $(CXX) $(CXXFLAGS) -c $<\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 bmi.o}{\loch\f2\fs56\cf2 : bmi.cxx }{\loch\f2\fs56\cf2 stats.h}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 bmistats.h}{\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 bmistats.o}{\loch\f2\fs56\cf2 : bmistats.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 stats.o}{\loch\f2\fs56\cf2 : stats.cxx\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 abstract types\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Derived Types\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In C++ abstract types are called }{\i\f1\fs56\cf2 structs}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The syntax is extremely simple (}{\f1\fs56\cf2 ptype}{\f1\fs56\cf2  stands for a primitive type)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 mytype}{\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 <}{\loch\f2\fs48\cf2 ptype}{\loch\f2\fs48\cf2 > var1;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 <}{\loch\f2\fs48\cf2 ptype}{\loch\f2\fs48\cf2 > var2;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct}{\loch\f2\fs56\cf2  Employee \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 string name, department;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2  ID;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 float salary;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Each variable belonging to a }{\loch\f1\fs56\cf2 struct}{\loch\f1\fs56\cf2  is called a }{\i\loch\f1\fs56\cf2 member}{\loch\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 The variables declared as a }{\loch\f1\fs56\cf2 struct}{\loch\f1\fs56\cf2  are often called }{\i\loch\f1\fs56\cf2 instances}{\loch\f1\fs56\cf2  of that }{\loch\f1\fs56\cf2 struct}{\loch\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 Note: it is customary for the name of a }{\loch\f1\fs56\cf2 struct}{\loch\f1\fs56\cf2  (or class) to be capitalized, or to use "camel case."\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720\fi0 {\loch\f2\fs48\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Declaring Types and Accessing Fields\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 Employee }{\loch\f2\cf2 fred}{\loch\f2\cf2 , bill, }{\loch\f2\cf2 susan}{\loch\f2\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\cf2 To access the fields of the type use the name of the type, a decimal point as a separator, and the name of the field.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 fred.name="Frederick Jones";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 fred.ID=1234;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 fred.department}{\loch\f2\cf2 ="Accounting";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\cf2 fred.salary}{\loch\f2\cf2 =75200.00;\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Structs}{\f1\fs80\cf1  in }{\f1\fs80\cf1 Structs}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Struct}{\f1\fs56\cf2  members may be instances of other }{\f1\fs56\cf2 structs}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct}{\loch\f2\fs56\cf2  Address \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   string }{\loch\f2\fs56\cf2 streetAddress}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   string city, state;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2   }{\loch\f2\fs56\cf2 int}{\loch\f2\fs56\cf2  }{\loch\f2\fs56\cf2 zipCode}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct}{\loch\f2\fs56\cf2  Employee \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 string name, department;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2  ID;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 float salary;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 Address }{\loch\f2\fs48\cf2 homeAddress}{\loch\f2\fs48\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 The Arrow Operator\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 As for other types, variables can be declared pointer to }{\f1\fs56\cf2 struct}{\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 Employee *jane;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 This is particularly common when passing }{\f1\fs56\cf2 struct}{\f1\fs56\cf2  (and class) instances to functions, to avoid a copy.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 When using a pointer, the }{\loch\f2\fs56\cf2 .}{\f1\fs56\cf2  field separator is replaced with the }{\i\f1\fs56\cf2 arrow operator\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 jane->name="Jane Smith"\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Vectors\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\i\f1\fs56\cf2 Containers}{\f1\fs56\cf2  are data structures that can be filled with any type (or at least multiple ones).  Several are available but here we will only discuss the }{\b\f1\fs56\cf2 vector}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Using a vector requires including its header\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 #include <vector>\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A vector is a }{\i\f1\fs56\cf2 template}{\f1\fs56\cf2  so it must be told what type it is going to be using.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 std}{\loch\f2\fs56\cf2 ::vector<float> V;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 std}{\loch\f2\fs56\cf2 :: }{\loch\f1\fs56\cf2 can be omitted if }{\loch\f2\fs56\cf2 using namespace }{\loch\f2\fs56\cf2 std}{\loch\f2\fs56\cf2  }{\loch\f1\fs56\cf2 (but avoid the }{\loch\f2\fs56\cf2 using }{\loch\f1\fs56\cf2 statement in }{\loch\f2\fs56\cf2 .h }{\loch\f1\fs56\cf2 files).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f1\fs56\cf2 We'll assuming the }{\loch\f2\fs56\cf2 std}{\loch\f1\fs56\cf2  namespace for the notes.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Initializing Vectors\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Vectors are similar to one-dimensional arrays\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 They represent an ordered sequence of elements\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Elements are accessed by integers 0\'85N-1 (for size N)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 But unlike arrays, vectors are dynamic.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 It's possible to enlarge and shrink them.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Initializing vectors\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Loops (like an array)\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 vector<float> V(N);\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 for (}{\loch\f2\fs40\cf2 int}{\loch\f2\fs40\cf2  i=0;i<N;++i) \'7b\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs40\cf2 V[i]=(float) i;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Dynamic Sizing\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 vector <float> V=\'7b\'7d;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 for (}{\loch\f2\fs40\cf2 int}{\loch\f2\fs40\cf2  i=0;i<N;++i) \'7b\par 
}\pard\plain\ltrpar\s5\li1872\fi-216\kerning24\fs32\lang1033\li1296\fi0 {\loch\f2\fs40\cf2 V.push_back}{\loch\f2\fs40\cf2 (i);   //appends i at the end of V\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\cf2    \'7d\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Initializer List (C++11)\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\loch\f2\fs40\cf2 vector<float> V=\'7b1., 2., 3., 4., 5., 6.\'7d\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Useful Vector Methods\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 For a vector V:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.push_back}{\loch\f2\fs48\cf2 (item)\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Append item to V\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.at(index)\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Access [index] with bounds checking ([index] does no checking)\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.start}{\loch\f2\fs48\cf2 ()\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Starting point for iterator\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.end}{\loch\f2\fs48\cf2 ()\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 End point (beyond last element) of iterator\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.size}{\loch\f2\fs48\cf2 ()\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Number of elements\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\loch\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\loch\f2\fs48\cf2 V.clear}{\loch\f2\fs48\cf2 ()\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li1152 {\pntext\pard\plain\f1\fs36 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs36{\pntxtb \'95}}{\f1\fs40\cf2 Empty V and make it size 0\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Vectors and }{\f1\fs80\cf1 Structs}{\f1\fs80\cf1 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Vectors can be members of }{\f1\fs56\cf2 structs}{\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct}{\loch\f2\fs56\cf2  Data \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 int}{\loch\f2\fs48\cf2  nobs;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\loch\f2\fs48\cf2 vector<float> }{\loch\f2\fs48\cf2 obs}{\loch\f2\fs48\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Vector elements can be }{\f1\fs56\cf2 struct}{\f1\fs56\cf2  instances\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 vector<Data> }{\loch\f2\fs56\cf2 dataList}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 This struct encapsulates a set of observations for birds denoted by their common name.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 struct }{\loch\f2\fs56\cf2 birdData}{\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 //Input values.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'a0 \'a0 string }{\loch\f2\fs56\cf2 commonName}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'a0 \'a0 vector<float> observations;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs96\cf3 classes\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Object-Oriented Programming\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An }{\b\f1\fs56\cf2 object}{\f1\fs56\cf2  is a data structure which has associated }{\i\f1\fs56\cf2 data}{\f1\fs56\cf2  (variables) and }{\i\f1\fs56\cf2 behaviors }{\f1\fs56\cf2 (subprograms).\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Objects work on their own data, communicating with outside units through an interface. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Objects }{\i\f1\fs56\cf2 encapsulate}{\f1\fs56\cf2  related concepts and keep them unified.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 In most object-oriented programming languages, objects are represented by }{\i\f1\fs56\cf2 classes}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 OOP Terminology\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An }{\i\f1\fs56\cf2 instance}{\f1\fs56\cf2  of a type or class is a variable of that type/class.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \tab }{\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2  A, B;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2                                 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\f1\fs48\cf2 \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\f1\fs40\cf2                       }{\dbch\af2\loch\f2\fs40\cf2 A}{\f1\fs40\cf2  and }{\dbch\af2\loch\f2\fs40\cf2 B}{\f1\fs40\cf2  are instances of }{\f1\fs40\cf2 Myclass}{\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A variable that is a member of the type/class is often called an }{\i\f1\fs56\cf2 attribute}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A }{\i\f1\fs56\cf2 method}{\f1\fs56\cf2  is a subprogram that is a member of a class. \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 An invocation of a method is often called a }{\i\f1\fs56\cf2 message}{\f1\fs56\cf2 .\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Data Hiding\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 One of the main purposes of OOP is to prevent outside units from accessing members in an uncontrolled way.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Making a member }{\i\f1\fs56\cf2 public}{\f1\fs56\cf2  \'93exposes\'94 it and allows anything that uses the class direct access to the member.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Typically, attributes are }{\i\f1\fs56\cf2 private}{\f1\fs56\cf2  and methods are public.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Methods can be written to obtain or change the value of an attribute.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Access Categories\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 public\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Accessible directly through an object\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 myobj.var1\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 private\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Accessible only within the class or to "friend" classes.  Must be communicated outside the class through an }{\f1\fs48\cf2 accessor}{\f1\fs48\cf2  ("getter") and changed through a }{\f1\fs48\cf2 mutator}{\f1\fs48\cf2  ("setter").  Default for a C++ class member.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 protected\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 private within the class, accessible to "friend" classes and to descendant classes.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Classes in C++\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We define a class with the keyword class\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 class }{\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 public:\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double var1;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double var2;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2   }{\dbch\af2\loch\f2\fs56\cf2 ival}{\dbch\af2\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\f1\fs56\cf2 Note: no methods in this class and all attributes are public.  So it's equivalent to a }{\dbch\af2\loch\f2\fs56\cf2 struct}{\f1\fs56\cf2 .  \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Methods\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The class definition contains only the prototypes of the methods.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 class }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 public:\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double var1, var2;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  var3;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double function1(double x, double y);\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double function2(double x);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d;\tab \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Methods\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The methods are defined with class::function\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 double }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::function1(double x, \tab \tab \tab \tab \tab \tab double y) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 return }{\dbch\af2\loch\f2\fs56\cf2 x+y}{\dbch\af2\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 double }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::function2(double x) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2  var1=x*var2;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 return;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Constructors and Destructors\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 A class always has a }{\i\f1\fs56\cf2 constructor}{\f1\fs56\cf2  and a }{\i\f1\fs56\cf2 destructor}{\f1\fs56\cf2 .  If you don't write them the compiler will try to do it for you.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The constructor is automatically called when an object (instance) of the class is created.\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 If you declare a variable of the type this calls the constructor\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 If you declare a variable of type pointer-to-class the constructor is called by the new operator.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The destructor is called when the object is released.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The constructor has the same name as the class.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The destructor has the same name as the class but preceded by ~\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Constructor and Destructor\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 class }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs56\cf2 public:\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double var1, var2;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  var3;\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 (double v1, double v2, }{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  v3);\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 ~}{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 (); // destructors never have arguments\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double function1(double x, double y);\par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs56\cf2 double function2(double x);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d;\tab \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\f1\fs40\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Class Methods\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 ::}{\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 (double v1, double v2, }{\dbch\af2\loch\f2\fs40\cf2 int}{\dbch\af2\loch\f2\fs40\cf2  v3) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 \tab var1=v1; var2=v2; var3=v3;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 ::~}{\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 ()\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 //Not much to do in this example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 double }{\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 ::function1(double x, double y) \'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\cf2 return }{\dbch\af2\loch\f2\cf2 x+y}{\dbch\af2\loch\f2\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 double }{\dbch\af2\loch\f2\fs40\cf2 MyClass}{\dbch\af2\loch\f2\fs40\cf2 ::function2(double x) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2   var1=x*var2;\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\cf2 return;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs40\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 /* \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 * }{\dbch\af2\loch\f2\fs24\cf2 testclass.cxx}{\dbch\af2\loch\f2\fs24\cf2  *  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 */\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 class }{\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2  \'7b\tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2 public:\tab    \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2     double var1, var2;\tab   \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2        }{\dbch\af2\loch\f2\fs24\cf2 int}{\dbch\af2\loch\f2\fs24\cf2  var3;\tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2        }{\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 ();\tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2        ~}{\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 ();\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2 private:\tab \tab \par 
}\pard\plain\ltrpar\s4\li1584\fi-288\kerning24\lang1033\li864\fi0 {\dbch\af2\loch\f2\fs24\cf2 double }{\dbch\af2\loch\f2\fs24\cf2 privatevar}{\dbch\af2\loch\f2\fs24\cf2 ;\tab \tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 ::}{\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 (double var1, double var2, }{\dbch\af2\loch\f2\fs24\cf2 int}{\dbch\af2\loch\f2\fs24\cf2  var3)\'7bcode\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 ::~}{\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2 ()\'7b\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 #include <}{\dbch\af2\loch\f2\fs24\cf2 iostream}{\dbch\af2\loch\f2\fs24\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 int}{\dbch\af2\loch\f2\fs24\cf2  main(}{\dbch\af2\loch\f2\fs24\cf2 int}{\dbch\af2\loch\f2\fs24\cf2  }{\dbch\af2\loch\f2\fs24\cf2 argc}{\dbch\af2\loch\f2\fs24\cf2 , char **}{\dbch\af2\loch\f2\fs24\cf2 argv}{\dbch\af2\loch\f2\fs24\cf2 )\'7b\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2 MyClass}{\dbch\af2\loch\f2\fs24\cf2  }{\dbch\af2\loch\f2\fs24\cf2 mytest}{\dbch\af2\loch\f2\fs24\cf2 ;\tab \tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2 mytest.var1=11.; mytest.var2=25.; mytest.var3=5;\tab \par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li432\fi0 {\dbch\af2\loch\f2\fs24\cf2 mytest.privatevar}{\dbch\af2\loch\f2\fs24\cf2 =13.;   }{\loch\af2\dbch\f2\fs24\cf2 {\field{\*\fldinst SYMBOL 231 \\f "Wingdings" \\s 12}{\fldrslt\f4\fs24}}}{\dbch\af2\loch\f2\fs24\cf2   ILLEGAL}{\dbch\af2\loch\f2\fs24\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs24\cf2 return 0;\'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Correct (and squished)\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 /* \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 * }{\dbch\af2\loch\f2\fs56\cf2 testclass.cxx}{\dbch\af2\loch\f2\fs56\cf2  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 *  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 */\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 class }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2  \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      public:\tab    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         double var1, var2;\tab   \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         }{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  var3;\tab          \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ();\tab   \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2        ~}{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ();\tab    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         void }{\dbch\af2\loch\f2\fs56\cf2 set_privatevar}{\dbch\af2\loch\f2\fs56\cf2 (double value);\tab    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         double }{\dbch\af2\loch\f2\fs56\cf2 get_privatevar}{\dbch\af2\loch\f2\fs56\cf2 ();\tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2     private:\tab \tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2         double }{\dbch\af2\loch\f2\fs56\cf2 privatevar}{\dbch\af2\loch\f2\fs56\cf2 ;\tab \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 (double v1, double v2, }{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  v3)\'7bvar1=v1;var2=v2;var3=v3;\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::~}{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ()\'7b\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 void }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 set_privatevar}{\dbch\af2\loch\f2\fs56\cf2 (double value) \'7b}{\dbch\af2\loch\f2\fs56\cf2 privatevar}{\dbch\af2\loch\f2\fs56\cf2 =value;\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 double }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 get_privatevar}{\dbch\af2\loch\f2\fs56\cf2 ()\'7breturn }{\dbch\af2\loch\f2\fs56\cf2 privatevar}{\dbch\af2\loch\f2\fs56\cf2 ;\'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 #include <}{\dbch\af2\loch\f2\fs56\cf2 iostream}{\dbch\af2\loch\f2\fs56\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 using namespace }{\dbch\af2\loch\f2\fs56\cf2 std}{\dbch\af2\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  main(}{\dbch\af2\loch\f2\fs56\cf2 int}{\dbch\af2\loch\f2\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 argc}{\dbch\af2\loch\f2\fs56\cf2 , char **}{\dbch\af2\loch\f2\fs56\cf2 argv}{\dbch\af2\loch\f2\fs56\cf2 )\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2       }{\dbch\af2\loch\f2\fs56\cf2 MyClass}{\dbch\af2\loch\f2\fs56\cf2  }{\dbch\af2\loch\f2\fs56\cf2 mytest}{\dbch\af2\loch\f2\fs56\cf2 ;\tab \tab \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2       mytest.var1=11.; mytest.var2=25.; mytest.var3=5;    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2       }{\dbch\af2\loch\f2\fs56\cf2 mytest.set_privatevar}{\dbch\af2\loch\f2\fs56\cf2 (13.);    \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      }{\dbch\af2\loch\f2\fs56\cf2 cout}{\dbch\af2\loch\f2\fs56\cf2 <<}{\dbch\af2\loch\f2\fs56\cf2 mytest.get_privatevar}{\dbch\af2\loch\f2\fs56\cf2 ()<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 return 0;\'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 this Operator\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 C++ does not pass the instance variable explicitly.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If you need access to it in a method, use the }{\dbch\af2\loch\f2\fs56\cf2 this}{\f1\fs56\cf2  operator \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 One example is using the same variable name as an argument and an attribute\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2 (}{\dbch\af2\loch\f2\fs56\cf2 x,y,z}{\dbch\af2\loch\f2\fs56\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      this->x=x;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      this->y=y;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      this->z=z;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Members in Methods\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 If you change a class member variable (attribute) in a method do not return that variable.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Methods that do nothing but set one or more attributes (}{\f1\fs56\cf2 mutators}{\f1\fs56\cf2 ) do not return anything.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 void }{\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 setx}{\dbch\af2\loch\f2\fs56\cf2 (x) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      this->x=x;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2      return;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Anything delivered outside the instance is returned.  E.g. accessors\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 float }{\dbch\af2\loch\f2\fs56\cf2 Myclass}{\dbch\af2\loch\f2\fs56\cf2 ::}{\dbch\af2\loch\f2\fs56\cf2 getx}{\dbch\af2\loch\f2\fs56\cf2 ()\'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2     return x;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\dbch\af2\loch\f2\fs56\cf2 \'7d\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Exercise\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Write a class Atom that contains the following attributes:\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Element symbol\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Element name\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Atomic mass\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Atomic number\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The methods should be\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Constructor to set attributes\par 
}\pard\plain\ltrpar\s3\li1152\fi-288\kerning24\fs40\lang1033\li720 {\pntext\pard\plain\f1\fs41 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs41{\pntxtb \'95}}{\f1\fs48\cf2 Compute and return the number of neutrons from the mass and number (n=mass-number)\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Inheritance and Polymorphism\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Classes can inherit from parent classes.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 New classes are called }{\i\f1\fs56\cf2 derived classes }{\f1\fs56\cf2 or }{\i\f1\fs56\cf2 child}{\f1\fs56\cf2  classes.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Multiple parents are allowed, but this is generally discouraged.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Attributes are not inherited if they are declared }{\loch\f2\fs56\cf2 private}{\f1\fs56\cf2 .  They must be public to be transmitted.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 Constructors are a little more complicated with inheritance.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 We will show just one simple example to illustrate.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Attribute Inheritance\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 The child type inherits all the attributes of its parent.\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs56\cf2 Child }{\loch\f2\fs56\cf2 billy}{\loch\f2\fs56\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\loch\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\loch\f1\fs56\cf2 The child inherits the constructor and }{\loch\f1\fs56\cf2 accessor}{\loch\f1\fs56\cf2  from the parent.  \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\pntext\pard\plain\f1\fs48 \'95\tab}{\*\pn\pnlvlblt\pnf1\pnfs48{\pntxtb \'95}}{\f1\fs56\cf2 But }{\loch\f2\fs56\cf2 age}{\f1\fs56\cf2  does not refer back to the parent, since that variable occurs only in the child.\par 
}\pard\plain\ltrpar\s1\li288\fi-288\kerning24\fs56\lang1033\li0\fi0 {\f1\fs80\cf1 Example\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 #include <}{\loch\f2\fs64\cf2 iostream}{\loch\f2\fs64\cf2 >\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 using namespace }{\loch\f2\fs64\cf2 std}{\loch\f2\fs64\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 class Parent \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2   protected:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2     }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2     string name;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2   public:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2     Parent(string name, }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 );\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2     string }{\loch\f2\fs64\cf2 getName}{\loch\f2\fs64\cf2 ();\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2     }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 getID}{\loch\f2\fs64\cf2 ();\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 Parent::Parent(string name, }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2    this->name=name;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2    this->}{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 =}{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 ;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 string Parent::}{\loch\f2\fs64\cf2 getName}{\loch\f2\fs64\cf2 () \'7b return this->name; \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  Parent::}{\loch\f2\fs64\cf2 getID}{\loch\f2\fs64\cf2 () \'7b return this->}{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 ; \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 class Child: public Parent \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2    private:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2      }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  age;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2    public:\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2      Child(string name, }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 , }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  age);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2      }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 getAge}{\loch\f2\fs64\cf2 ();\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 Child::Child(string name, }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 , }{\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  age) : Parent(name, }{\loch\f2\fs64\cf2 myID}{\loch\f2\fs64\cf2 ) \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2    this->age=age;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  Child::}{\loch\f2\fs64\cf2 getAge}{\loch\f2\fs64\cf2 () \'7b return this->age; \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 int}{\loch\f2\fs64\cf2  main() \'7b\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2   Child }{\loch\f2\fs64\cf2 billy}{\loch\f2\fs64\cf2 ("Bill",345,20);\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2   }{\loch\f2\fs64\cf2 cout}{\loch\f2\fs64\cf2 <<}{\loch\f2\fs64\cf2 billy.getName}{\loch\f2\fs64\cf2 ()<<" "<<}{\loch\f2\fs64\cf2 billy.getID}{\loch\f2\fs64\cf2 ()<<" "<<}{\loch\f2\fs64\cf2 billy.getAge}{\loch\f2\fs64\cf2 ()<<"\'5cn";\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2   return 0;\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li0\fi0 {\loch\f2\fs64\cf2 \'7d\par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}\pard\plain\ltrpar\s2\li720\fi-288\kerning24\fs48\lang1033\li288 {\f1\fs56\cf2 \par 
}
}